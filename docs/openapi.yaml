openapi: 3.0.1
info:
  title: Bank Card Service API
  version: v1
  description: API для управления банковскими картами и переводами. Реализован ролевой доступ (USER/ADMIN), шифрование данных и Liquibase.

servers:
  - url: http://localhost:8080
    description: Локальный сервер разработки

tags:
  - name: Аутентификация
    description: Вход в систему и получение JWT-токена.
  - name: Пользователь (USER)
    description: Эндпоинты для обычных пользователей (просмотр своих карт, переводы, баланс).
  - name: Администратор (ADMIN)
    description: Эндпоинты для администраторов (создание, блокировка/удаление карт, управление пользователями).

# КОМПОНЕНТЫ (DTO И БЕЗОПАСНОСТЬ)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Pageable:
      in: query
      name: pageable
      schema:
        type: string
        example: page=0&size=10&sort=id,asc
      description: Параметры пагинации и сортировки (например, 'page=0&size=10&sort=id,desc').

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: user
          description: Имя пользователя.
        password:
          type: string
          example: user
          description: Пароль.

    JwtResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          description: JWT токен.
        type:
          type: string
          example: Bearer
          description: Тип токена.

    BalanceResponse:
      type: object
      properties:
        balance:
          type: number
          format: float
          example: 100.50
          description: Текущий баланс карты.

    CardCreationRequest:
      type: object
      required:
        - ownerId
        - cardNumber
        - expiryDate
      properties:
        ownerId:
          type: integer
          format: int64
          example: 101
          description: ID пользователя, которому принадлежит карта.
        cardNumber:
          type: string
          example: '1111222233334444'
          description: Полный номер карты (16-19 цифр).
          pattern: '^\d{16,19}$'
        expiryDate:
          type: string
          example: '12/28'
          description: Срок действия карты в формате MM/YY.
          pattern: '^(0[1-9]|1[0-2])/[0-9]{2}$'

    CardStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [ACTIVE, BLOCKED]
          example: BLOCKED
          description: Новый статус карты.

    TransferRequest:
      type: object
      required:
        - sourceCardId
        - targetCardId
        - amount
      properties:
        sourceCardId:
          type: integer
          format: int64
          example: 1
          description: ID карты, с которой осуществляется перевод.
        targetCardId:
          type: integer
          format: int64
          example: 2
          description: ID карты, на которую осуществляется перевод.
        amount:
          type: number
          format: float
          example: 100.00
          description: Сумма перевода (должна быть положительной).
          minimum: 0.01

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: ID карты.
        ownerId:
          type: integer
          format: int64
          example: 101
          description: ID владельца карты.
        maskedCardNumber:
          type: string
          example: '1111 **** **** 4444'
          description: Маскированный номер карты.
        balance:
          type: number
          format: float
          example: 1000.50
          description: Текущий баланс карты.
        expiryDate:
          type: string
          format: date
          example: '2028-12-31'
          description: Срок действия карты.
        status:
          type: string
          enum: [ACTIVE, BLOCKED]
          example: ACTIVE
          description: Статус карты.

    PageCardResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
          description: Список карт на текущей странице.
        totalPages:
          type: integer
          example: 1
          description: Общее количество страниц.
        totalElements:
          type: integer
          example: 1
          description: Общее количество элементов.
        size:
          type: integer
          example: 10
          description: Размер страницы.
        number:
          type: integer
          example: 0
          description: Текущий номер страницы (начиная с 0).


# ЭНДПОИНТЫ
paths:
  /auth/login:
    post:
      tags:
        - Аутентификация
      summary: Аутентификация пользователя и получение JWT-токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401': {description: Неверные учетные данные (логин/пароль).}

  # Эндпоинты для Пользователя (USER)
  /api/v1/user/cards:
    get:
      tags:
        - Пользователь (USER)
      summary: Получение списка карт текущего пользователя
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Список карт текущего пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponse'
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (не хватает роли USER).}

  /api/v1/user/cards/{cardId}:
    get:
      tags:
        - Пользователь (USER)
      summary: Просмотр баланса карты
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema: {type: integer, format: int64}
          description: ID карты для просмотра баланса.
      responses:
        '200':
          description: Баланс карты успешно получен.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (карта не принадлежит пользователю или не хватает роли USER).}
        '404': {description: Карта не найдена.}

  /api/v1/user/cards/transfer:
    post:
      tags:
        - Пользователь (USER)
      summary: Перевод средств между картами
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200': {description: Перевод успешно выполнен.}
        '400': {description: Неверный запрос (например, отрицательная сумма, неверный ID карты).}
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (карта-источник не принадлежит пользователю или не хватает роли USER).}
        '404': {description: Карта-источник или карта-получатель не найдена.}
        '409': {description: Недостаточно средств на карте-источнике.}

  # Эндпоинты для Администратора (ADMIN)
  /api/v1/admin/users:
    get:
      tags:
        - Администратор (ADMIN)
      summary: Получение списка всех карт в системе
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Список всех карт.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponse'
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (не хватает роли ADMIN).}

  /api/v1/admin/users/{userId}:
    delete:
      tags:
        - Администратор (ADMIN)
      summary: Удаление пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: {type: integer, format: int64}
          description: ID пользователя для удаления.
      responses:
        '204': {description: Пользователь успешно удален.}
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (не хватает роли ADMIN).}
        '404': {description: Пользователь не найден.}


  /api/v1/admin/cards:
    post:
      tags:
        - Администратор (ADMIN)
      summary: Создание новой карты
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreationRequest'
      responses:
        '201':
          description: Карта успешно создана.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400': {description: Неверный запрос (например, неверный формат номера карты/даты).}
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (не хватает роли ADMIN).}
        '404': {description: Владелец карты (ownerId) не найден.}

  /api/v1/admin/cards/{cardId}/status:
    patch: # Изменено с PUT на PATCH для соответствия контроллеру
      tags:
        - Администратор (ADMIN)
      summary: Изменение статуса карты (ACTIVE/BLOCKED)
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema: {type: integer, format: int64}
          description: ID карты для изменения.
      requestBody: # Используется тело запроса CardStatusRequest
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardStatusRequest'
      responses:
        '200': {description: Статус карты успешно обновлен.}
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (не хватает прав администратора).}
        '404': {description: Карта не найдена.}

  /api/v1/admin/cards/{cardId}:
    delete:
      tags:
        - Администратор (ADMIN)
      summary: Удаление карты
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema: {type: integer, format: int64}
          description: ID карты для удаления.
      responses:
        '204': {description: Карта успешно удалена.}
        '401': {description: Не авторизован.}
        '403': {description: Доступ запрещен (не хватает прав администратора).}
        '404': {description: Карта не найдена.}